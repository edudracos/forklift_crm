Based on the assumptions made, here are the core classes, functions, and methods that will be necessary for the CRM:

1. Customer:
   - Properties:
     - id: int
     - name: str
     - contact_details: str
     - total_owed: float
   - Methods:
     - add_forklift(forklift: Forklift) -> None: Adds a forklift to the customer's profile.
     - add_service_part(service_part: ServicePart) -> None: Adds a service part to the customer's profile.
     - add_sale(sale: Sale) -> None: Adds a sale to the customer's profile.
     - calculate_total_owed() -> float: Calculates the total amount owed by the customer.

2. Forklift:
   - Properties:
     - id: int
     - name: str
     - price: float

3. ServicePart:
   - Properties:
     - id: int
     - name: str
     - price: float

4. Sale:
   - Properties:
     - id: int
     - date: datetime
     - items: List[Item]
     - total_cost: float

5. Item:
   - Properties:
     - product: Union[Forklift, ServicePart]
     - quantity: int

Now, let's proceed with creating the necessary files and their content.

1. `main.py` (Entrypoint file)
```python
import streamlit as st
from customer import Customer

def main():
    st.title("Forklift Company CRM")
    customer = Customer()
    # Add Streamlit UI code here

if __name__ == "__main__":
    main()
```

2. `customer.py`
```python
from dataclasses import dataclass
from typing import List, Union
from forklift import Forklift
from service_part import ServicePart
from sale import Sale

@dataclass
class Customer:
    id: int
    name: str
    contact_details: str
    total_owed: float
    forklifts: List[Forklift]
    service_parts: List[ServicePart]
    sales: List[Sale]

    def __init__(self, id: int, name: str, contact_details: str):
        self.id = id
        self.name = name
        self.contact_details = contact_details
        self.total_owed = 0.0
        self.forklifts = []
        self.service_parts = []
        self.sales = []

    def add_forklift(self, forklift: Forklift) -> None:
        self.forklifts.append(forklift)

    def add_service_part(self, service_part: ServicePart) -> None:
        self.service_parts.append(service_part)

    def add_sale(self, sale: Sale) -> None:
        self.sales.append(sale)

    def calculate_total_owed(self) -> float:
        self.total_owed = sum(sale.total_cost for sale in self.sales)
        return self.total_owed
```

3. `forklift.py`
```python
from dataclasses import dataclass

@dataclass
class Forklift:
    id: int
    name: str
    price: float
```

4. `service_part.py`
```python
from dataclasses import dataclass

@dataclass
class ServicePart:
    id: int
    name: str
    price: float
```

5. `sale.py`
```python
from dataclasses import dataclass
from datetime import datetime
from typing import List
from item import Item

@dataclass
class Sale:
    id: int
    date: datetime
    items: List[Item]
    total_cost: float
```

6. `item.py`
```python
from dataclasses import dataclass
from typing import Union
from forklift import Forklift
from service_part import ServicePart

@dataclass
class Item:
    product: Union[Forklift, ServicePart]
    quantity: int
```

Please note that the above code is a simplified implementation to demonstrate the structure and functionality of the CRM. In a real-world scenario, you may need to add error handling, database integration, and additional features as per your requirements.

Let me know if you need any further clarification or if there's anything else I can assist you with.